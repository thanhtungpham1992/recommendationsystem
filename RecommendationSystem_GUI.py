import streamlit as st
import pandas as pd
# import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
pd.options.display.float_format = '{:.2f}'.format

## data
link_source = 'https://drive.google.com/uc?export=download&id='

link_product = link_source + '1QGEVPuV34xIfZMadexbnu3u1o4L_heYz'
link_review = link_source + '1Qd2j-SP0IZN_MOJ4lDbhN7dthDWKxdTS'
link_data_xl = link_source + '1Q5xnXFPHDENDfhjLx6RH1AYCkcz1y90b'
link_Recomender_Collborative = link_source + '1QSuaLQ8OInj3LAHl3aHMvNqrLwjZYHNL'



#--------------
# Gonfig GUI
st.set_page_config(page_title='Product Recommendation', layout = 'wide', initial_sidebar_state = "expanded",page_icon="üìù")

# Load data
@st.cache
def load_products():
    return pd.read_csv(link_product)

products = load_products() 

@st.cache
def load_reviews():
    return pd.read_csv(link_review)

@st.cache
def load_data_xl():
    return pd.read_csv(link_data_xl, encoding='UTF-8')

@st.cache
def load_cosine_similarities():
    from sklearn.feature_extraction.text import TfidfVectorizer
    from sklearn.metrics.pairwise import linear_kernel, cosine_similarity
    tf = TfidfVectorizer(analyzer='word', min_df=0)
    tfidf_matrix = tf.fit_transform(data_xl.products_wt)
    return cosine_similarity(tfidf_matrix, tfidf_matrix)

@st.cache
def load_recomenders_collborative():
    return pd.read_csv(link_Recomender_Collborative)

# Function recommenders for an user
@st.cache
def get_recommenders_for_user(recommenders,customer_id, items_number=6):
    recds = recommenders[recommenders['customer_id']==customer_id]
    recds = recds.head(items_number)
    result = pd.merge(left=recds,right=products[products.item_id.isin(recds.product_id)] ,how='left',left_on='product_id',right_on='item_id')
    return result

# Set option show chart
st.set_option('deprecation.showPyplotGlobalUse', False)

#--------------
# GUI
menu = ["T·ªïng quan","T√¨m hi·ªÉu d·ªØ li·ªáu","ƒê·ªÅ xu·∫•t ng∆∞·ªùi d√πng v·ªõi Content based filtering","ƒê·ªÅ xu·∫•t ng∆∞·ªùi d√πng v·ªõi Collaborative filtering"]
choice = st.sidebar.selectbox("Ch·ªçn ch·ª©c nƒÉng:",menu)
if choice == 'T·ªïng quan':
    html_temp = """
    <div style="background-color:tomato;padding:10px">
    <h1 style="color:white;text-align:center;">ƒê·ªí √ÅN T·ªêT NGHI·ªÜP DATA SCIENCE</h1>
    <h1 style="color:white;text-align:center;">H·ªÜ TH·ªêNG ƒê·ªÄ XU·∫§T S·∫¢N PH·∫®M CHO NG∆Ø·ªúI D√ôNG</h1>
    </div>
    """
    st.markdown(html_temp,unsafe_allow_html=True)
    st.markdown("<h2 style='text-align: left; color: #003153'>T·ªîNG QUAN H·ªÜ TH·ªêNG ƒê·ªÄ XU·∫§T NG∆Ø·ªúI D√ôNG</h2>", unsafe_allow_html=True)
    st.markdown("<h3 style='text-align: left; color: #0047ab;'>1. Gi·ªõi thi·ªáu</h3>", unsafe_allow_html=True)
    st.markdown("- Tiki l√† m·ªôt h·ªá sinh th√°i th∆∞∆°ng m·∫°i ‚Äúall in one‚Äù, trong ƒë√≥ c√≥ **tiki.vn**, l√† m·ªôt website th∆∞∆°ng m·∫°i ƒëi·ªán t·ª± ƒë·ª©ng top 2 c·ªßa Vietnam v√† top 6 khu v·ª±c ƒê√¥ng Nam √Å")   
    st.markdown("- Tr√™n trang n√†y ƒë√£ tri·ªÉn khai nhi·ªÅu ti·ªán √≠ch h·ªó tr·ª£ n√¢ng cao tr·∫£i nghi·ªám ng∆∞·ªùi d√πng v√† h·ªç mu·ªën x√¢y d·ª±ng nhi·ªÅu ti·ªán √≠ch h∆°n n·ªØa.")
    st.markdown("- Gi·∫£ s·ª≠ c√¥ng ty n√†y ch∆∞a tri·ªÉn khai Recommender System v√† b·∫°n ƒë∆∞·ª£c y√™u c·∫ßu tri·ªÉn khai h·ªá th·ªëng n√†y, b·∫°n s·∫Ω l√†m g√¨?")
    st.write(" ")

    st.markdown("<h3 style='text-align: left; color: #0047ab;'>2. V√¨ sao c√≥ d·ª± √°n?</h3>", unsafe_allow_html=True)
    st.markdown("- Ch∆∞a c√≥ h·ªá th·ªëng Recommendation System")   
    st.markdown("- => M·ª•c ti√™u:X√¢y d·ª±ng Recommendation System cho m·ªôt ho·∫∑c m·ªôt s·ªë nh√≥m h√†ng h√≥a tr√™n tiki.vn gi√∫p ƒë·ªÅ xu·∫•t v√† g·ª£i √Ω cho ng∆∞·ªùi d√πng/ kh√°ch h√†ng. => X√¢y d·ª±ng c√°c m√¥ h√¨nh ƒë·ªÅ xu·∫•t")   
    st.write(" ")

    st.markdown("<h3 style='text-align: left; color: #0047ab;'>3. D·ªØ li·ªáu cung c·∫•p</h3>", unsafe_allow_html=True)
    st.markdown("- D·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p s·∫µn g·ªìm c√≥ c√°c t·∫≠p tin: ProductRaw.csv, ReviewRaw.csv ch·ª©a th√¥ng tin s·∫£n ph·∫©m, review v√† rating cho c√°c s·∫£n ph·∫©m thu·ªôc c√°c nh√≥m h√†ng h√≥a nh∆∞ Mobile_Tablet, TV_Audio, Laptop, Camera, Accessory")   
    st.image('picture/tables properties.jpg',caption='M√¥ t·∫£ c√°c thu·ªôc t√≠nh')
    st.write(" ")
    
    st.markdown("<h3 style='text-align: left; color: #0047ab;'>4. Y√™u c·∫ßu ƒë·∫∑t ra l√† t·∫≠p trung gi·∫£i quy·∫øt hai b√†i to√°n:</h3>", unsafe_allow_html=True)
    st.markdown("- B√†i to√°n 1: ƒê·ªÅ xu·∫•t ng∆∞·ªùi d√πng v·ªõi content - based filtering")
    st.markdown("- B√†i to√°n 2: ƒê·ªÅ xu·∫•t ng∆∞·ªùi d√πng v·ªõi Collaborative filtering")
    st.image('picture/two recomender system.png')
    st.write(" ")

elif choice == "T√¨m hi·ªÉu d·ªØ li·ªáu":
    html_temp = """
    <div style="background-color:tomato;padding:10px">
    <h1 style="color:white;text-align:center;">H·ªÜ TH·ªêNG ƒê·ªÄ XU·∫§T S·∫¢N PH·∫®M CHO NG∆Ø·ªúI D√ôNG</h1>
    <h2 style="color:white;text-align:center;">T√¨m hi·ªÉu d·ªØ li·ªáu</h2>
    </div>
    """
    strNhanXet ='<h5 style="color:#0047ab;text-align:left;">Nh·∫≠n x√©t:</h5>'
    # Header-----
    st.markdown(html_temp,unsafe_allow_html=True)
    reviews = load_reviews() # pd.read_csv('data/Review.csv')
    
    sns.displot(products,x='rating',kind='hist')
    plt.title("Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi rating c·ªßa product",fontsize=8,color='blue')
    st.pyplot()
        
    st.markdown(strNhanXet,unsafe_allow_html=True)
    st.write('''- Rating c·ªßa s·∫£n ph·∫©m trong product c√≥ gi√° tr·ªã t·ª´ 0 ƒë·∫øn 5
- S·ªë l∆∞·ª£ng rating 0 v√† 5 t∆∞∆°ng ƒë∆∞∆°ng nhau
- ƒêi·ªÉm rating ph·∫ßn l·ªõn t·∫≠p trung t·ª´ 4-5.
- ƒêi·ªÉm rating = 0 c√≥ th·ªÉ do s·∫£n ph·∫©m ch∆∞a ƒë∆∞·ª£c ƒë√°nh gi√° n√™n ƒë·ªÉ m·∫∑c ƒë·ªãnh''')
    st.write('')

    # S·ª± ph√¢n b·ªï Ratings c·ªßa kh√°ch h√†ng
    sns.displot(reviews,x='rating',kind='hist')
    plt.title("Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi rating c·ªßa kh√°ch h√†ng",fontsize=8,color='blue')
    st.pyplot()
    st.markdown(strNhanXet,unsafe_allow_html=True)
    st.write('''- Ph·∫ßn l·ªõn kh√°ch h√†ng ph·∫£n h·ªìi t√≠ch c·ª±c v·ªÅ s·∫£n ph·∫©m
- S·∫£n ph·∫©m c√≥ ch·∫•t l∆∞·ª£ng t·ªët ho·∫∑c kh√°ch h√†ng d·ªÖ t√≠nh
- ƒêa ph·∫ßn c√°c ƒë√°nh gi√° t·ª´ tr√™n 4 ƒëi·ªÉm, ƒë√°nh gi√° 5 ƒëi·ªÉm chi·∫øm t·ª∑ l·ªá cao
- C√°c ƒë√°nh gi√° c√≥ gi√° tr·ªã t·ª´ 1-5''')
    st.write('')

    # S·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu
    brands = products.groupby('brand')['item_id'].count().sort_values(ascending=False)
    bar = sns.barplot(data=brands.to_frame()[1:11].reset_index(),x='brand',y='item_id', palette="Blues_r")
    bar.set_xticklabels(bar.get_xticklabels(), rotation=90)
    plt.ylabel('Number of product')
    plt.title("Top 10 th∆∞∆°ng hi·ªáu c√≥ nhi·ªÅu s·∫£n ph·∫©m nh·∫•t",fontsize=8,color='blue')
    st.pyplot()
    st.markdown(strNhanXet,unsafe_allow_html=True)
    st.write('''- Th∆∞∆°ng hi·ªáu samsung c√≥ nhi·ªÅu m√£ h√†ng nh·∫•t
- C√°c th∆∞∆°ng hi·ªáu kh√°c c√≥ s·ªë l∆∞·ª£ng m√£ h√†ng kho·∫£ng t·ª´ 60-100''')
    st.write("")

    # Gi√° b√°n theo th∆∞∆°ng hi·ªáu
    price_by_brand = products.groupby(by='brand').mean()['price']
    plt.figure(figsize=(15,8))
    bar = sns.barplot(data=price_by_brand.sort_values(ascending=False)[:10].to_frame().reset_index(),x='brand',y='price', palette="Blues_r")
    bar.set_xticklabels(bar.get_xticklabels(), rotation=90)
    plt.ylabel('Price')
    plt.title("Top 10 gi√° b√°n theo th∆∞∆°ng hi·ªáu",fontsize=18,color='blue')
    st.pyplot()
    st.markdown(strNhanXet,unsafe_allow_html=True)
    st.write('- Th∆∞∆°ng hi·ªáu Hitachi c√≥ trung b√¨nh gi√° b√°n cao nh·∫•t')
    st.write("")
    
    top_rating_products = reviews.groupby(by='product_id').count()['customer_id'].sort_values(ascending=False)[:20]
    top_rating_products.index =products[products.item_id.isin(top_rating_products.index)]['name'].str[:25]
    plt.figure(figsize=(15,8))
    bar = sns.barplot(data=top_rating_products.to_frame().reset_index(),x='name',y='customer_id', palette="Blues_r")
    bar.set_xticklabels(bar.get_xticklabels(), rotation=90)
    plt.ylabel('S·ªë l∆∞·ª£ng ƒë√°nh gi√°')
    plt.title("Top 20 s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë√°nh gi√° nhi·ªÅu nh·∫•t",fontsize=18,color='blue')
    st.pyplot()
    st.markdown(strNhanXet,unsafe_allow_html=True)
    st.write('''- Ph·ª• ki·ªán ƒëi·ªán tho·∫°i, m√°y t√≠nh
- Chu·ªôt kh√¥ng d√¢y logitech ƒë∆∞·ª£c ƒë√°nh gi√° nhi·ªÅu nh·∫•t''')

elif choice == "ƒê·ªÅ xu·∫•t ng∆∞·ªùi d√πng v·ªõi Content based filtering":
    html_temp = """
    <div style="background-color:tomato;padding:10px">
    <h1 style="color:white;text-align:center;">H·ªÜ TH·ªêNG ƒê·ªÄ XU·∫§T S·∫¢N PH·∫®M CHO NG∆Ø·ªúI D√ôNG</h1>
    <h2 style="color:white;text-align:center;">ƒê·ªÅ xu·∫•t s·∫£n ph·∫©m cho ng∆∞·ªùi d√πng v·ªõi Content based filtering</h2>
    </div>
    """
    # Header-----
    st.markdown(html_temp,unsafe_allow_html=True)
    data_xl = load_data_xl()
    cosine_similarities = load_cosine_similarities()
    with st.form(key='T√¨m ki·∫øm s·∫£n ph·∫©m t∆∞∆°ng t·ª±'):
        st.write("###### L·ª±a ch·ªçn t√™n s·∫£n ph·∫©m")
        name_item = st.selectbox('Ch·ªçn t√™n s·∫£n ph·∫ßm c·∫ßn t√¨m c√°c s·∫£n ph·∫©m t∆∞∆°ng t·ª±', products['name'])
        items_num = st.slider(label='S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë·ªÅ xu·∫•t:',min_value=2,max_value=8,value=8,step=2)
        submit_button = st.form_submit_button(label='ƒê·ªÅ xu·∫•t s·∫£n ph·∫©m üìù')
    if submit_button:
        results = {}
        for idx, row in data_xl.iterrows():
            similar_indices = cosine_similarities[idx].argsort()[-9:-1]
            similar_items = [(cosine_similarities[idx][i]) for i in similar_indices]
            similar_items = [(cosine_similarities[idx][i], data_xl.index[i]) for i in similar_indices]
            results[idx] = similar_items[0:]
        ## l·ª±a ch·ªçn s·∫£n ph·∫©m
        st.markdown("<h3 style='text-align: left; color: #0047ab;'>Th√¥ng tin s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn:</h3>", unsafe_allow_html=True)
        idx_prd = products.index[products['name']==name_item].tolist()[0]
        ## ƒë∆∞a h√¨nh v√†o form
        col1, col2 = st.columns([2,8])
        with col1:
            st.image(str(products.loc[idx_prd,'image']))
        with col2:
            st.write('###### %s'%(products.loc[idx_prd,'name']))
            strprice = '%s ƒë'%(format(products.loc[idx_prd,'price'],',d'))
            st.markdown("<h4 style='text-align: left; color: Red;'>"+strprice+"</h4>", unsafe_allow_html=True)
            st.write('Th∆∞∆°ng Hi·ªáu: %s'%(products.loc[idx_prd,'brand']))
            st.write('ƒê√°nh g√≠a: %s'%(products.loc[idx_prd,'rating']))
            st.markdown("[Web link](https://tiki.vn/"+products.loc[idx_prd,'url'].split('//')[-1]+")")
        st.write("")

        # K·∫øt qu·∫£ s·∫£n ph·∫©m t∆∞∆°ng t·ª±
        st.markdown("<h3 style='text-align: left; color: #0047ab;'>C√≥ th·ªÉ b·∫°n mu·ªën xem c√°c s·∫£n ph·∫©m n√†y:</h3>", unsafe_allow_html=True)
        sim_list = []
        for i in range(0,items_num,2):
            # for i
            item_id = data_xl.iloc[results[idx_prd][i][1]]['item_id']
            idx_prd = products.index[products['item_id']==item_id].tolist()[0]
            # for i+1
            item_id_1 = data_xl.iloc[results[idx_prd][i+1][1]]['item_id']
            idx_prd_1 = products.index[products['item_id']==item_id_1].tolist()[0]
            # in s·∫£n ph·∫©m          
            col1, col2, col3, col4 = st.columns([2,3,2,3])
            with col1:
                st.image(str(products.loc[idx_prd,'image']))
            with col2:
                st.write('###### %s'%(products.loc[idx_prd,'name']))
                strprice = '%s ƒë'%(format(products.loc[idx_prd,'price'],',d'))
                st.markdown("<h4 style='text-align: left; color: Red;'>"+strprice+"</h4>", unsafe_allow_html=True)
                st.write('Th∆∞∆°ng Hi·ªáu: %s'%(products.loc[idx_prd,'brand']))
                st.write('ƒê√°nh g√≠a: %s'%(products.loc[idx_prd,'rating']))
                st.markdown("[Web link](https://tiki.vn/"+products.loc[idx_prd,'url'].split('//')[-1]+")")
            with col3:
                st.image(str(products.loc[idx_prd_1,'image']))
            with col4:
                st.write('###### %s'%(products.loc[idx_prd_1,'name']))
                strprice = '%s ƒë'%(format(products.loc[idx_prd_1,'price'],',d'))
                st.markdown("<h4 style='text-align: left; color: Red;'>"+strprice+"</h4>", unsafe_allow_html=True)
                st.write('Th∆∞∆°ng Hi·ªáu: %s'%(products.loc[idx_prd_1,'brand']))
                st.write('ƒê√°nh g√≠a: %s'%(products.loc[idx_prd_1,'rating']))
                st.markdown("[Web link](https://tiki.vn/"+products.loc[idx_prd_1,'url'].split('//')[-1]+")")
            st.write(" ")
    

elif choice == "ƒê·ªÅ xu·∫•t ng∆∞·ªùi d√πng v·ªõi Collaborative filtering":
    html_temp = """
    <div style="background-color:tomato;padding:10px">
    <h1 style="color:white;text-align:center;">H·ªÜ TH·ªêNG ƒê·ªÄ XU·∫§T S·∫¢N PH·∫®M CHO NG∆Ø·ªúI D√ôNG</h1>
    <h2 style="color:white;text-align:center;">ƒê·ªÅ xu·∫•t s·∫£n ph·∫©m cho ng∆∞·ªùi d√πng v·ªõi Collaborative filtering</h2>
    </div>
    """
    st.markdown(html_temp,unsafe_allow_html=True)
    custIdsDefault = [10701688,11763074,13132598,11360428,12501987,12286743,15356393,14329244,14634037,16136723,17046856,13562927,12533916,10669721,10794654,10067279,11044205,14390035,18132106,11282171,14284583,17335575,14090397,15677717,19198887,17680741,18860589,19781287,11517697,16822674,10107865,19014688,11472727,11671593,13067276,15534235,15415309,16837996,20188312,17734805,20758207,11163955,11043040,12985305,16409336,11676531,11858104,17611104,10034801,16799850,18256187,10279553,19677744,18535485,11174386,17539237,16319435,11345636,15868853,13175665,10600682,13890346,17334166,10371235,18285577,11225533,11520401,10523440,10568749,13800460,18810996,14555930,13086421,15083755,10522112,14703210,13981024,10906890,13333245,15462201,13631188,20441329,13085882,13554619,19148341,13642827,14058815,10321855,10509329,20545482,20775881,19190448,20108289,11333760,19276521,17882495,14425088,14877474,17515216,10309831,10870410,10526674,13459468,11174641,11232488,19371818,15191237,18915491,15508611,13700067,18421965,13612033,15766998,10416934,12179361,12250233,10503680,19452549,10542562,13872637,11612099,17681785,12452208,10245727,17872615,11365720,11059384,15856762,10182179,18440429,14742850,20387094,12486134,10488355,14451729,10625224,15861135,11213649]
    recommenders = load_recomenders_collborative()
    with st.form(key='ƒê·ªÅ xu·∫•t s·∫£n ph·∫©m cho ng∆∞·ªùi d√πng'):
        selected_user = st.multiselect('Ch·ªçn ng∆∞·ªùi d√πng', custIdsDefault ,[10701688])
        items_num = st.slider(label='S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë·ªÅ xu·∫•t:',min_value=1,max_value=10,value=6,step=1)
        submit_button = st.form_submit_button(label='Th·ª±c hi·ªán ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m üìù')
    if submit_button:
        if len(selected_user) ==0:
            st.markdown("<h4 style='text-align: left; color: #0047ab;'>B·∫°n ch∆∞a ch·ªçn ng∆∞·ªùi d√πng, vui l√≤ng ch·ªçn ng∆∞·ªùi d√πng c√≥ trong danh s√°ch!</h4>", unsafe_allow_html=True)
        else:
            data = get_recommenders_for_user(recommenders,selected_user[0],items_num)
            data.reset_index()
            strtemp = 'C√≥ {} s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t:'.format(data.shape[0])
            st.markdown("<h3 style='text-align: left; color: #0047ab;'>"+strtemp+"</h3>", unsafe_allow_html=True)
            # in s·∫£n ph·∫©m   
            for i in range(0,data.shape[0],2):
                col1, col2, col3, col4 = st.columns([2,3,2,3])
                with col1:
                    st.image(str(data.loc[i,'image']))
                with col2:
                    st.write('###### %s'%(data.loc[i,'name']))
                    strprice = '%s ƒë'%(format(data.loc[i,'price'],',d'))
                    st.markdown("<h4 style='text-align: left; color: Red;'>"+strprice+"</h4>", unsafe_allow_html=True)
                    st.write('Th∆∞∆°ng Hi·ªáu: %s'%(data.loc[i,'brand']))
                    st.write('ƒê√°nh g√≠a: %s'%(data.loc[i,'rating']))
                    st.markdown("[Web link](https://tiki.vn/"+data.loc[i,'url'].split('//')[-1]+")")
                with col3:
                    if (i+1) < data.shape[0]:
                        st.image(str(data.loc[i+1,'image']))
                with col4:
                    if (i+1) < data.shape[0]:
                        st.write('###### %s'%(data.loc[i+1,'name']))
                        strprice = '%s ƒë'%(format(data.loc[i+1,'price'],',d'))
                        st.markdown("<h4 style='text-align: left; color: Red;'>"+strprice+"</h4>", unsafe_allow_html=True)
                        st.write('Th∆∞∆°ng Hi·ªáu: %s'%(data.loc[i+1,'brand']))
                        st.write('ƒê√°nh g√≠a: %s'%(data.loc[i+1,'rating']))
                        st.markdown("[Web link](https://tiki.vn/"+data.loc[i+1,'url'].split('//')[-1]+")")
                st.write("")
            # in b·∫£ng k·∫øt qu·∫£ ƒë·ªÅ xu·∫•t 
            st.markdown("<h3 style='text-align: left; color: #0047ab;'>B·∫£ng k·∫øt qu·∫£ chi ti·∫øt:</h3>", unsafe_allow_html=True)
            st.dataframe(data)

# Footer
footer_name ='''<a style="color:#282c35; font-style:italic; font-size:14px; padding:10px 0 15px">
Trung T√¢m Tin H·ªçc Tr∆∞·ªùng ƒê·∫°i h·ªçc khoa h·ªçc T·ª± nhi√™n (Team: V√ï H·ªÆU L·ªòC - PH·∫†M THANH T√ôNG)</a>'''
st.markdown("<div><a style='color:#e5e4e2'>"+"_"*178+"</a><br>"+footer_name+"</div>",unsafe_allow_html=True)